Index: cora.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sys\r\nimport numpy as np\r\nfrom datetime import date\r\nimport mysql.connector\r\nfrom tabulate import tabulate\r\n\r\n\r\n#Better to define most functions outside and call them(easier)\r\nsys.path.append('../modules/')\r\nimport functions as f\r\n\r\nf.prepare_pipeline()\r\n\r\n#start code for Cora DM\r\n\r\n\r\n#Define the stages of the dialogue manager with a vector and 0,1 so we have memory on which stage are we and what things\r\n#have been done before (I thought it could be useful)\r\n\r\nDM_vec=[0,0,0]\r\n\r\n#Define intents dictionary: this dictionary has to be initialized everytime ( we use a function to initialize it)\r\nIntents = f.init_intent()\r\n    \r\n#Define  frame dictionary: this dictionary accumulates the info during the whole conversation\r\n\r\nFrame= f.init_frame()\r\n\r\n#IDEA: create a function that notices during the whole conversation if any particular or important intent is happening??\r\n#      not only look for intent when we expect one.\r\n\r\n\r\n# Greeting part\r\nwhile DM_vec[0] == 0:\r\n    \r\n    print('Cora presentation and greeting')\r\n    input_text = f.wait_input()\r\n    Frame, Intents = f.intent_slot_filling(input_text,Frame,Intents)\r\n    print(Intents)\r\n    \r\n    if Intents['ask_help'] == True:\r\n        print('Of course I will help!')\r\n    \r\n    if Intents['greeting'] == True:\r\n        print('Nice to meet you')\r\n        #Idea: if neuralcoref works it could say the name if you gave your name!\r\n    \r\n    DM_vec[0] = 1\r\n    \r\n\r\n#Second stage: where the required slots are filled    \r\nwhile DM_vec[1]== 0:\r\n    \r\n    have_age= False\r\n    have_loc = False\r\n    \r\n    if (Frame['age'] != 0) and (f.is_number(Frame['age']) == True):\r\n        have_age = True\r\n        \r\n    #Here we need to check if the country is in our list\r\n    if (Frame['live_in'] != 0):\r\n        have_loc = True\r\n    \r\n    #Here the subject is missing but it needs to be added\r\n    if (have_age == True) and (have_loc == True):\r\n        DM_vec[1] = 1\r\n        break\r\n    else:\r\n        print(\" I will need to ask you a few more questions to fill the query up\")\r\n    \r\n        if (Frame['age'] == 0) or (f.is_number(Frame['age']) == False):\r\n            print(\"Sorry I didn't quite get your/her/his age\")\r\n            input_text = f.wait_input()\r\n            Frame, Intents = f.intent_slot_filling(input_text,Frame,Intents)\r\n            Intents = f.init_intent()\r\n        else:\r\n            have_age =True\r\n\r\n\r\n        #Here we need to check if the country is in our list\r\n        if (Frame['live_in'] == 0):\r\n            print(\" Sorry the location you specify is either not a country or is not in our list\")\r\n            input_text = f.wait_input()\r\n            Frame, Intents = f.intent_slot_filling(input_text,Frame,Intents)\r\n            Intents = f.init_intent()\r\n        else:\r\n            have_loc = True\r\n            \r\n            \r\n#############################################\r\n# Part where you extract the info from the database and fill in the profile\r\n\r\nfilled_slots = {}\r\n\r\nfor k,v in Frame.items():\r\n    if (k=='age') and (f.is_number(v) == True):\r\n        filled_slots[k] = v\r\n    if (k=='live_in'):\r\n        filled_slots['loc'] = v\r\n    if (k=='med_cond_risk'):\r\n        filled_slots['medical_risk'] += v\r\n    if (k == 'med_cond') and ('pregnant' in v):\r\n        filled_slots['pregnant'] = True\r\n    if (k=='smoker') and (type(v) == bool):\r\n        filled_slots['smoker'] = v\r\n\r\nprint(filled_slots)\r\n\r\ndict = filled_slots\r\n#Check database\r\n\r\nmydb = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"hola123\", database=\"nli_db\")\r\nmycursor = mydb.cursor()\r\n\r\nif 0 <= dict.get(\"age\") <= 69:\r\n    mycursor.execute(\"select score from age where agecol=1\")\r\n    score1 = [x[0] for x in mycursor.fetchall()]\r\n    print(\"your age risk (\", dict.get(\"age\"), \") is\", score1)\r\n\r\nif 70 <= dict.get(\"age\") <= 100:\r\n    mycursor.execute(\"select score from age where agecol=100\")\r\n    score1 = [x[0] for x in mycursor.fetchall()]\r\n    print(\"your age risk (\", dict.get(\"age\"), \") is\", score1)\r\n\r\nprint(\"Your profile is...\")\r\n#############################################\r\n\r\n\r\n#for now it tries to fill all the slots, maybe it would be better if it's more flexible\r\nwhile DM_vec[2]==0:\r\n    \r\n    \r\n    ######## This should be turned into a function??\r\n    empty_slots=[]\r\n    for k,v in Frame.items():\r\n        if  (type(v)!= list) and (type(v)!= bool) and (v == 0) and (k != 'pronoun') and (k != 'name'):\r\n            empty_slots.append(k)\r\n            print('slots that are NOT filled:', k)\r\n            if k == 'smoker':\r\n                print(v)\r\n        elif (type(v)== list) and (len(v) == 0) and (k != 'med_cond'):\r\n            empty_slots.append(k)\r\n            print('slots that are NOT filled:', k)\r\n    \r\n            \r\n    if len(empty_slots) == 0:\r\n        DM_vec[2]=1\r\n        \r\n    else: \r\n        for item in empty_slots:\r\n            print(\"I need information about {}\".format(item))\r\n            input_text = f.wait_input()\r\n            Frame, Intents = f.intent_slot_filling(input_text,Frame,Intents)\r\n            Intents = f.init_intent()\r\n            \r\n\r\n#!!!!!If we did manage to get more information:\r\n# here we would repeat the connection to the database and the profiling, otherwise we continue\r\n\r\n#This part tries to see if we need another profiling or we say goodbye\r\nwhile DM_vec[3] == 0:\r\n    print('Would you like to know the profile of another person? Maybe your sister, your uncle..')\r\n    \r\n    input_text = f.wait_input()\r\n    Frame, Intents = f.intent_slot_filling(input_text,Frame,Intents)\r\n    \r\n    if Intents['accept'] == True:\r\n        \r\n        print('Lets start another query then')\r\n        DM_vec[3] = 1\r\n        #HERE WE NEED TO FIND A WAY TO GO BACK TO THE START: we need a higher level while loop to control this flow\r\n    \r\n    if (Intents['deny'] == True) or (Intents['goodbye']== True):\r\n        \r\n        print('As you want. I hope I see you soon. Stay safe!')\r\n        DM_vec[3] = 1\r\n    \r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cora.py	(revision eae32de6f95e44fb23a40944c7b338a2eeb62eeb)
+++ cora.py	(date 1607548630346)
@@ -93,6 +93,9 @@
 
 filled_slots = {}
 
+mydb = mysql.connector.connect(host="localhost", user="root", password="hola123", database="nli_db")
+mycursor = mydb.cursor()
+
 for k,v in Frame.items():
     if (k=='age') and (f.is_number(v) == True):
         filled_slots[k] = v
@@ -123,6 +126,16 @@
     score1 = [x[0] for x in mycursor.fetchall()]
     print("your age risk (", dict.get("age"), ") is", score1)
 
+
+mycursor.execute("SELECT score FROM location WHERE country=%s", (dict.get("loc"),))
+data = [x[0] for x in mycursor.fetchall()]
+
+if data:
+    print("your country risk (", dict.get("loc"), ") is", data)
+
+else:
+    print("Location does not exist")
+
 print("Your profile is...")
 #############################################
 
